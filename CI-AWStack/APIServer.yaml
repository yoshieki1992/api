AWSTemplateFormatVersion: 2010-09-09
Description: Despliegue de instancia EC2  
Metadata:
  Authors:
    Description: Yoshieki Tanamachi yoshieki1992@gmail.com
  License: gg
Parameters:
  TagKey:
    Description: TagKey
    Type: String
    Default: Name
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Solo caracteres ASCII.
  TagValue:
    Description: TagValue
    Type: String
    Default: ec2-cloudappi
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Solo caracteres ASCII.
  KeyPairName:
    Description: >-
      Keypair existente
    Default: docker
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: No se puede ejecutar sin una keypair.
  InstanceType:
    Description: Tipo de Instancia.
    Type: String
    Default: t2.micro
  OperatingSystem:
    Description: Linux.
    Type: String
    Default: Linux
    ConstraintDescription: Linux.
    AllowedValues:
      - Linux
  SSHLocation:
    Description: >-
      Rango de IP permitido para conexiones SSH.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    
Mappings:
  RegionOS2AMI:
    us-east-1:
      Linux: ami-09d95fab7fff3776c
  
  OS2SSHPort:
    Linux:
      SSHPort: '22'

Resources:
  LinuxEC2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'
    Properties:
      ImageId: !FindInMap 
        - RegionOS2AMI
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -ex
            - |
              yum update -y aws-cfn-bootstrap
            - |
              yum install -y aws-cli
            - |
              yum install -y amazon-linux-extras 
            - |
              yum install -y ruby
            - |
              yum install -y jq 
            - | 
              curl -sL https://rpm.nodesource.com/setup_12.x | sudo -E bash  
            - |
              yum install -y nodejs
            - |
              sudo npm install pm2 -g
            - |
              hostnamectl set-hostname api.users.es
           
              # Helper function.
            - |
              function error_exit
            - |
              {
            - '  /opt/aws/bin/cfn-signal -e 1 -r "$1" '''
            - !Ref WaitHandle
            - |
              '
            - |2
                exit 1
            - |
              }
            - |
              # Install the AWS CodeDeploy Agent.
            - |
              cd /home/ec2-user/
            - >
              aws s3 cp
              's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm'
              . || error_exit 'Failed to download AWS CodeDeploy Agent.'
            - >
              yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed
              to install AWS CodeDeploy Agent.' 
            - '/opt/aws/bin/cfn-init -s '
            - !Ref 'AWS::StackId'
            - ' -r LinuxEC2Instance --region '
            - !Ref 'AWS::Region'
            - |2
               || error_exit 'Failed to run cfn-init.'
            - |
              # All is well, so signal success.
            - >-
              /opt/aws/bin/cfn-signal -e 0 -r "AWS CodeDeploy Agent setup
              complete." '
            - !Ref WaitHandle
            - |
              '
      KeyName: !Ref KeyPairName
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      IamInstanceProfile: !ImportValue Ec2InstanceProfileID

  WaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    Properties:
      Handle: !Ref WaitHandle
      Timeout: '300'

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Acesso HTTP puerto 8080.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !FindInMap 
            - OS2SSHPort
            - !Ref OperatingSystem
            - SSHPort
          ToPort: !FindInMap 
            - OS2SSHPort
            - !Ref OperatingSystem
            - SSHPort
          CidrIp: !Ref SSHLocation


  


  

 


